package com.avantia.test;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class TransformationApp {
	static Document document;

	public static void main(String argv[]) {
		
		//Cargamos el insumo
		argv= new String[1];
		argv[0] = "c://file//usuarios.xml";
		
		//verificamos el insumo
		if (argv.length != 1) {
			System.err.println("Usage: java TransformationApp filename");
			System.exit(1);
		}

		//generamos la fabrica de construción
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		factory.setValidating(true);
		try 
		{
			//construimos el xml obtenido del insumo desde la fabrica
			File f = new File(argv[0]);
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(f);//convertimos el documento obtenido a Document
		} 
		catch (SAXParseException spe) 
		{
			// Error generated by the parser
			System.out.println("\n** error en la conversion" + ", en la linea "	+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println(" error obtenido: " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}

		//**********************tranform
		try {
			// usamos una fabrica de transformacion para la salida del document
			TransformerFactory tFactory = TransformerFactory.newInstance();
			Transformer transformer = tFactory.newTransformer();

			//cargamos nuestro insumo para la transformacion
			DOMSource source = new DOMSource(document); //other opction:  new DOMSource(node);
			StreamResult result = new StreamResult(System.out); //especificamos que la salida la queremos en consola
			transformer.transform(source, result);//transformacion

		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("* error en la fabrica de transformación ");
			System.out.println("  " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;
			if (tce.getException() != null)
				x = tce.getException();
			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("* error en la transformación ");
			System.out.println("  " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;
			if (te.getException() != null)
				x = te.getException();
			x.printStackTrace();
		} finally {
			
			System.out.println("Finaizamos");
		}
		
		//****************************************
		
	} // main
}